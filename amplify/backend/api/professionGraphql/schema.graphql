# schema
type AppVersionHistory
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  platform: AppPlatform!
    @index(
      name: "AppVersionByDate"
      queryField: "AppVersionByDate"
      sortKeyFields: ["createdAt"]
    )
  latestVersion: String!
  createdAt: String!
}

enum AppPlatform {
  IOS
  ANDROID
}

type Area
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["sp"] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  activities: [Activity] @hasMany(indexName: "byAreaActivities", fields: ["id"])
}

type Activity
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["sp"] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  areaID: ID! @index(name: "byAreaActivities")
  area: Area @belongsTo(fields: ["areaID"])
}

type Users
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID
  cognitoID: ID @auth(rules: [{ allow: owner, operations: [read, delete] }])
  name: String
    @auth(
      rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read] }
        { allow: public, provider: iam, operations: [read] }
      ]
    )
  lastName: String
    @auth(
      rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read] }
        { allow: public, provider: iam, operations: [read] }
      ]
    )
  email: String
    @auth(rules: [{ allow: owner }])
    @index(name: "byEmailUser", queryField: "userByEmail")
  identityID: ID
    @auth(
      rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read] }
      ]
    )
  gender: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
  notificationToken: [String]
    @auth(rules: [{ allow: owner, operations: [read, delete] }])
  favorites: [Favorites] @hasMany(indexName: "byUsersFavorites", fields: ["id"])
  business: [Business] @hasMany(indexName: "byUsersBusiness", fields: ["id"])
  comments: [BusinessComment]
    @hasMany(indexName: "byUserComments", fields: ["id"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Reports
  @model
  @auth(rules: [{ allow: private, provider: iam, operations: [create] }]) {
  id: ID!
  userID: ID!
  subject: String!
  description: String!
  status: reportStatus @default(value: "PENDING")
}

enum reportStatus {
  PENDING
  RESOLVED
}
type Business
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public }
      { allow: private, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  userID: ID @index(name: "byUsersBusiness", queryField: "listBusinessbyUserID")
  user: Users @belongsTo(fields: ["userID"])
  status: BusinessStatus @default(value: "ENABLED")
  identityID: String
  name: String
  image: String
  images: [String]
  thumbnail: String
  email: String
  emailVerified: Boolean @default(value: "false")
  emailConfirmationCode: String @default(value: "")
  phone: String
  whatsapp: String
  instagram: String
  facebook: String
  page: String
  coordinates: Coordinates
  activity: String
  tags: [String]
  favorites: [Favorites]
    @hasMany(indexName: "byBusinessFavorites", fields: ["id"])
  description: String
  prefer: Boolean @default(value: "false")
  schedule: String
  comments: [BusinessComment]
    @hasMany(indexName: "byBusinessComments", fields: ["id"])
  catalogpdf: String @default(value: "")
}
enum BusinessStatus {
  ENABLED
  DISABLED
  SUSPENDED
}

type BusinessComment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: private, provider: iam, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  userID: ID! @index(name: "byUserComments")
  user: Users @belongsTo(fields: ["userID"])
  businessID: ID! @index(name: "byBusinessComments")
  stars: Int!
  description: String
}

type Favorites
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, provider: iam, operations: [read] }
      { allow: groups, groups: ["sp"], operations: [read] }
    ]
  ) {
  id: ID!
    @auth(
      rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read] }
        { allow: groups, groups: ["sp"], operations: [read] }
      ]
    )
  businessID: ID!
    @index(
      name: "byBusinessFavorites"
      sortKeyFields: ["userID"]
      queryField: "favoritesByBusinessID"
    )
    @auth(
      rules: [
        { allow: owner }
        { allow: private, provider: iam, operations: [read] }
        { allow: groups, groups: ["sp"], operations: [read] }
      ]
    )
  business: Business @belongsTo(fields: ["businessID"])
  userID: ID
    @index(name: "byUsersFavorites", queryField: "listFavoritesbyUserID")
    @auth(
      rules: [
        { allow: owner }
        { allow: groups, groups: ["sp"], operations: [read] }
      ]
    )
  user: Users @belongsTo(fields: ["userID"])
  position: Int
  owner: String
    @auth(
      rules: [
        { allow: owner, operations: [read, delete] }
        { allow: groups, groups: ["sp"], operations: [read] }
      ]
    )
}

type Complaints
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read] }
      { allow: groups, groups: ["sp"], operations: [read, update, delete] }
    ]
  ) {
  id: ID!
  userID: ID!
  businessID: ID!
  status: ComplaintStatus! @default(value: "PENDING")
  reason: String!
  description: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type ReasonComplaints
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["sp"] }
    ]
  ) {
  id: ID!
  name: String!
}
type Logs @model @auth(rules: [{ allow: groups, groups: ["sp"] }]) {
  id: ID!
  userID: ID!
  type: TypeLogs
  # type searchs
  text: String
  # type favorite
  businessID: ID
  posI: Int
  posE: Int
  # type business views
  name: String
}

# object
# enum
enum ComplaintStatus {
  PENDING
  RESOLVED
}

enum TypeLogs {
  SEARCH
  BUSINESS_VIEW
}

type Coordinates {
  lat: Float!
  lon: Float!
}
